#include "UserInterface.hpp"

#include <iostream>
#include <memory>
#include <string>
#include <fstream>
#include <filesystem>
#include <regex>

#include "Position.hpp"
#include "Point.hpp"
#include "Sphere.hpp"
#include "Astre.hpp"

#include "Validator.hpp"

namespace cli {

void UserInterface::printCreatingMenu() {
  std::cout << "\n======Object Creation======\n\t"
            << "1) Point \n\t"
            << "2) Sphere\n\t"
            << "3) Astre\n\t"
            << "4) Go back\n";
}

std::string UserInterface::readLine() const {
  std::string userInput;
  std::cout << ">>> ";
  std::getline(std::cin, userInput);
  return userInput;
}

template <class T>
static void printIterator(T iter) {
  while (iter.hasNext()) {
    auto val = iter.next();
    std::cout << *val << std::endl;
  }
}

void UserInterface::handleSavingToFile() {
  std::filesystem::path saveFilePath = ".";

  std::string fileName = utils::Validator::validateASCIIString("What is the name of the file you want to save to? \n>>>");

  std::cout << "\"" + fileName + ".psf\"";
  saveFilePath /= (fileName + ".psf");

  std::ofstream saveFileHandle(saveFilePath);

  auto iter = objects.iter();
  while (iter.hasNext()) {
    auto obj = iter.next();
    saveFileHandle << *obj << "\n";
  }
  saveFileHandle.close();
}

void UserInterface::handleLoadingFromSaveFile() {
  namespace fs = std::filesystem;
  fs::path p = fs::current_path();

  // List the current directory for save files.
  for (fs::directory_entry entry : fs::directory_iterator(p)) {
    if (entry.path().extension() == ".psf") {
      std::cout << entry.path().filename().string() + "\n";
    }
  }

  std::string saveFileName = utils::Validator::validateASCIIString("Please input the name of the file you want to load\n>>>");

  std::ifstream infile("./" + saveFileName);
  std::string line;

  std::regex pointRx(planets::Point::savePattern);
  std::regex sphereRx(planets::Sphere::savePattern);
  std::regex astreRx(planets::Astre::savePattern);
  std::smatch m;

  while (std::getline(infile, line)) {
    std::cout << line;
    if (std::regex_match(line, m, pointRx)) {
      std::cout << "Point ??\n";
      objects.push(std::make_shared<planets::Point>(line));
    } else if (std::regex_match(line, m, sphereRx)) {
      objects.push(std::make_shared<planets::Sphere>(line));
    } else if (std::regex_match(line, m, astreRx)) {
      objects.push(std::make_shared<planets::Astre>(line));
    }
  }
}

void UserInterface::handleInput() {
  auto userInput = readLine();
  int userChoice;
  try {
    userChoice = std::stoi(userInput);
  } catch (const std::exception& e) {
    std::cerr << e.what() << '\n';
  }

  switch (state) {
    case UserInterfaceState::MENU:
      switch (userChoice) {
        case 1: {
          auto itp = objects.iter();
          printIterator(itp);
        } break;
        case 2:
          state = UserInterfaceState::CREATING;
          break;
        case 3:
          handleSavingToFile();
          break;
        case 4:
          handleLoadingFromSaveFile();
          break;
        case 5:
          exit(0);
          break;

        default:
          std::cerr << "not a valid input !!!"
                    << "\n";
          break;
      }
      break;
    case UserInterfaceState::CREATING:
      switch (userChoice) {
        case 1: {
          std::string n = "Autogenerated";
          planets::Point p = planets::Point(n, planets::Position(1, 2, 3));
          objects.push(std::make_shared<planets::Point>(p));
          break;
        }
        case 2: {
          planets::Sphere s = planets::Sphere::sphereFromUserInput();
          objects.push(std::make_shared<planets::Sphere>(s));
          break;
        }
        case 3: {
          auto a = planets::Astre::astreFromUserInput();
          objects.push(std::make_shared<planets::Astre>(a));
          break;
        }
        case 4:
          state = UserInterfaceState::MENU;
          break;
        default:
          break;
      }
      break;

    default:
      break;
  }
}

void UserInterface::loop() {
  while (true) {
    printMenu();
    handleInput();
  }
}

void UserInterface::printMainMenu() {
  std::cout << "\n======Planet Calculator=====" << std::endl;
  std::cout << "Select an action :\n\t"
            << "1) List all objects\n\t"
            << "2) Create an object\n\t"
            << "3) Save the current objects\n\t"
            << "4) Load a save of a previous context\n\t"
            << "5) Quit\n";
}

void UserInterface::printMenu() {
  switch (state) {
    case UserInterfaceState::MENU:
      printMainMenu();
      break;
    case UserInterfaceState::CREATING:
      printCreatingMenu();
      break;
    default:
      break;
  }
}

}  // namespace cli